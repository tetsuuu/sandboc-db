version: 2

defaults: &defaults
  working_directory: /var/tmp/deploy
  docker:
    - image: hashicorp/terraform:0.12.6
      user: root

references:
  commands:
#    lint_check: &lint_check
#      name: terraform fmt
#      command: |
#        if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 0 ]; then
#          echo "Format of this terraform files is not appropriate:"
#          echo
#          cat fmt_result.txt
#          echo
#          echo "Please run terraform fmt"
#          exit 1
#        fi
    hoge_environment: &hoge_environment
      name: export hoge environment
      command: |
        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          echo "export STAGE=production" >> $BASH_ENV
          echo "export SERIVICE=hoge" >> $BASH_ENV
        else
          echo "export STAGE=${CIRCLE_BRANCH}" >> $BASH_ENV
          echo "export SERIVICE=hoge" >> $BASH_ENV
        fi
    fuga_environment: &fuga_environment
      name: export fuga environment
      command: |
        if [ "${CIRCLE_BRANCH}" == "master" ]; then
          echo "export STAGE=production" >> $BASH_ENV
          echo "export SERIVICE=fuga" >> $BASH_ENV
        else
          echo "export STAGE=${CIRCLE_BRANCH}" >> $BASH_ENV
          echo "export SERIVICE=fuga" >> $BASH_ENV
        fi
    slack_notify: &slack_notify
      name: notify to slack
      command: |
        curl -X POST --data-urlencode \
        "payload={ \
        \"channel\": \"#${SLACK_CANNEL}\", \"username\": \"circleci\", \"text\": \"${CIRCLE_PROJECT_REPONAME} ${STAGE} waiting for ${SERIVICE} Infra deployment.\n https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}\", \"icon_emoji\": \":circleci:\" }" \
        ${SLACK_WEB_HOOK}

workflows:
  version: 2
  plan_and_apply:
    jobs:
      - checkout_code
#      - lint:
#          requires:
#            - checkout_code
#          filters:
#            branches:
#              only:
#                - develop
      - fuga-init:
          requires:
            - checkout_code
      - fuga-plan:
          requires:
            - fuga-init
      - fuga-send-approval-link:
          requires:
            - fuga-plan
      - fuga-hold:
          type: approval
          requires:
            - fuga-plan
      - fuga-apply:
          requires:
            - fuga-hold
      - hoge-init:
          requires:
            - fuga-apply
      - hoge-plan:
          requires:
            - hoge-init
      - hoge-send-approval-link:
          requires:
            - hoge-plan
      - hoge-hold:
          type: approval
          requires:
            - hoge-plan
      - hoge-apply:
          requires:
            - hoge-hold
#      - pr-environment-init-and-plan:
#          requires:
#            - hoge-apply
#          filters:
#            branches:
#              only:
#                - staging
#      - pr-environment-send-approval-link:
#          requires:
#            - pr-environment-init-and-plan
#      - pr-environment-hold:
#          type: approval
#          requires:
#            - pr-environment-init-and-plan
#      - pr-environment-apply:
#          requires:
#            - pr-environment-hold

jobs:
  checkout_code:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .

#  lint:
#    <<: *defaults
#    steps:
#      - attach_workspace:
#          at: .
#      - run: *lint_check

  fuga-init:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: *fuga_environment
      - run: echo "SERIVICE:::${SERIVICE}  STAGE:::${STAGE}"
      - run: pwd
      - run:
         name: fuga initialize
         command: |
           cd ./${SERIVICE}/${STAGE}
           echo "SERIVICE:::${SERIVICE}  STAGE:::${STAGE}"
           pwd
           terraform init -input=false
      - run: pwd
      - persist_to_workspace:
          root: .
          paths:
            - .

  fuga-plan:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: *fuga_environment
      - run:
         name: fuga plan
         command: |
           cd ./${SERIVICE}/${STAGE}
           pwd
           rm -f "plan.out"
           terraform plan -out=plan.out
      - persist_to_workspace:
          root: .
          paths:
            - .

  fuga-send-approval-link:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - run: *fuga_environment
      - run: *slack_notify

  fuga-apply:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: *fuga_environment
      - run:
         name: fuga apply
         command: |
           cd ./${SERIVICE}/${STAGE}
           rm -f "plan.out"
           terraform apply -input=false --auto-approve plan.out

  hoge-init:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: *hoge_environment
      - run:
         name: hoge initialize
         command: |
           cd ./${SERIVICE}/${STAGE}
           terraform init -input=false
      - persist_to_workspace:
          root: .
          paths:
            - .

  hoge-plan:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: *hoge_environment
      - run:
         name: hoge plan
         command: |
           cd ./${SERIVICE}/${STAGE}
           rm -f "plan.out"
           terraform plan -out=plan.out
      - persist_to_workspace:
          root: .
          paths:
            - .

  hoge-send-approval-link:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - run: *hoge_environment
      - run: *slack_notify

  hoge-apply:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: *hoge_environment
      - run:
         name: hoge apply
         command: |
           cd ./${SERIVICE}/${STAGE}
           rm -f "plan.out"
           terraform apply -input=false --auto-approve plan.out

#  pr-environment-init-and-plan:
#    <<: *defaults
#    steps:
#      - attach_workspace:
#          at: .
#      - run: *hoge_environment
#      - run:
#         name: pr-environment initialize
#         command: |
#           cd ./${SERIVICE}/pullrequest
#           terraform init -input=false
#           rm -f "plan.out"
#           terraform plan -out=plan.out
#      - persist_to_workspace:
#          root: .
#          paths:
#            - .
#
#  pr-environment-send-approval-link:
#    docker:
#      - image: buildpack-deps:trusty
#    steps:
#      - run:
#         name: export pr environment
#         command: |
#           echo "export STAGE=PR" >> $BASH_ENV
#           echo "export SERIVICE=hoge" >> $BASH_ENV
#      - run: *slack_notify
#
#  pr-environment-apply:
#    <<: *defaults
#    steps:
#      - attach_workspace:
#          at: .
#      - run: *hoge_environment
#      - run:
#         name: pr-environment apply
#         command: |
#           cd ./${SERIVICE}/pullrequest
#           rm -f "plan.out"
#           terraform apply -input=false --auto-approve plan.out
